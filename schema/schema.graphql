schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Query {
  getPost(id: String!): Post @aws_cognito_user_pools
  getAllPosts(limit: Int!, nextToken: String): PostsResult!
    @aws_api_key
    @aws_cognito_user_pools
  getUserPosts(userId: String!, limit: Int!, nextToken: String): PostsResult!
    @aws_api_key
    @aws_cognito_user_pools
  getUserAccount(id: String!): User! @aws_cognito_user_pools

  getUserGallery(userId: String!): Gallery! @aws_api_key @aws_cognito_user_pools

  getAgentContext(input: AgentContextInput!): AgentContextResponse!
    @aws_cognito_user_pools

  getUserByEmail(email: String!): User @aws_cognito_user_pools
  generateImages(input: String!): [String!]! @aws_cognito_user_pools
  imageGuidedGeneration(input: ImageGuidedGenerationInput!): [String!]!
    @aws_cognito_user_pools
  replaceImageBackground(input: ReplaceImageBackgroundInput!): [String!]!
    @aws_cognito_user_pools

  # Prompt templates queries
  getPromptTemplate(id: String!): PromptTemplate! @aws_cognito_user_pools
  getAllPromptTemplates(limit: Int!, nextToken: String): PromptTemplatesResult!
    @aws_cognito_user_pools

  # Subscription queries
  getSubscription(tier: String!): SubscriptionPlan! @aws_cognito_user_pools

  getUserSubscription(userId: String!, tier: String!): UserSubscriptionPlan
    @aws_cognito_user_pools
    @aws_api_key
  getAllSubscriptions(limit: Int!, nextToken: String): SubscriptionsResult!
    @aws_cognito_user_pools
    @aws_api_key
  getAllUserSubscriptions(
    limit: Int!
    nextToken: String
  ): UserSubscriptionsResult! @aws_cognito_user_pools @aws_api_key
}

type Gallery @aws_cognito_user_pools {
  userId: String!
  mediaType: String!
  s3BucketUriPlusKey: String!
  folder: String!
  video: String!
}
input AgentContextInput @aws_cognito_user_pools {
  query: String!
  session_id: String
}
input ImageGuidedGenerationInput @aws_cognito_user_pools {
  prompt: String!
  conditionImage: String!
  numOfImages: Int!
}

type AgentContextResponse @aws_cognito_user_pools {
  response: String!
  session_id: String!
}

input ReplaceImageBackgroundInput @aws_cognito_user_pools {
  prompt: String!
  image: String!
  numOfImages: Int!
  maskPrompt: String!
}

type Mutation {
  startAgentStateMachine(input: StartAgentStateMachineInput!): Boolean!
    @aws_cognito_user_pools
  createUserAccount(userInput: CreateUserInput!): User! @aws_cognito_user_pools
  updateUserAccount(userInput: UpdateUserInput!): User! @aws_cognito_user_pools
  createPost(postInput: CreatePostInput!): Post!
    @aws_api_key
    @aws_cognito_user_pools
  updatePost(postInput: UpdatePostInput!): Post! @aws_cognito_user_pools
  getGeneratedPostAgent(
    input: String!
    userId: String!
  ): OnGeneratedTextAgentResponse! @aws_cognito_user_pools @aws_iam
  deletePost(userId: String!, postId: String!): Boolean! @aws_cognito_user_pools
  retrieveAndGenerateResponse(input: RetrieveAndGenerateResponseInput!): String
    @aws_cognito_user_pools

  generatedText(input: String!): GeneratedTextResponse!
    @aws_iam
    @aws_cognito_user_pools

  generateImagesWithLambda(input: String!): Boolean
    @aws_cognito_user_pools
    @aws_api_key
  generateImagesResponse(input: [String!]!): GeneratedImageResponse!
    @aws_iam
    @aws_cognito_user_pools

  generateTextToVideo(input: TextToVideoInput!): Boolean!
    @aws_cognito_user_pools

  # Prompt templates mutations
  createPromptTemplate(input: CreatePromptTemplateInput!): PromptTemplate!
    @aws_cognito_user_pools
  updatePromptTemplate(input: UpdatePromptTemplateInput!): PromptTemplate!
    @aws_cognito_user_pools
  deletePromptTemplate(id: String!): Boolean! @aws_cognito_user_pools

  # Subscription mutations
  createSubscription(input: CreateSubscriptionInput!): SubscriptionPlan!
    @aws_cognito_user_pools
    @aws_api_key

  updateSubscription(input: UpdateSubscriptionInput!): SubscriptionPlan!
    @aws_cognito_user_pools
    @aws_api_key
  cancelUserSubscription(id: String!, userId: String!): Boolean!
    @aws_cognito_user_pools
    @aws_api_key
  createUserSubscription(
    input: CreateUserSubscriptionInput!
  ): UserSubscriptionPlan! @aws_cognito_user_pools @aws_api_key
  updateUserSubscription(
    input: UpdateUserSubscriptionInput!
  ): UserSubscriptionPlan! @aws_cognito_user_pools @aws_api_key
}

input TextToVideoInput @aws_cognito_user_pools {
  query: String!
  bucketUri: String!
  folderUUID: String!
  userId: String!
}

input RetrieveAndGenerateResponseInput @aws_cognito_user_pools {
  text: String!
  sessionId: String
}

type GeneratedImageResponse @aws_iam @aws_cognito_user_pools {
  base64Images: [String]!
}
type GeneratedTextResponse @aws_iam @aws_cognito_user_pools {
  text: String!
}

type OnGeneratedTextAgentResponse @aws_iam @aws_cognito_user_pools {
  text: String!
}

enum PLATFORM @aws_cognito_user_pools {
  X
  LINKEDIN
  FACEBOOK
  WEB
}
enum TONE @aws_cognito_user_pools {
  FRIENDLY
  PROFESSIONAL
  HUMOROUS
  MOTIVATIONAL
}
enum POST_LENGTH @aws_cognito_user_pools {
  SHORT
  LONG
}

input StartAgentStateMachineInput @aws_cognito_user_pools {
  platform: PLATFORM!
  topic: String!
  tone: TONE!
  length: POST_LENGTH!
  useKB: Boolean!
}

input CreateUserInput @aws_cognito_user_pools {
  username: String!
  firstName: String!
  lastName: String!
  about: String!
  email: AWSEmail!
  userType: USERTYPE!
  profilePicKey: String!
  profilePicUrl: String!
}

input UpdateUserInput @aws_cognito_user_pools {
  id: String!
  username: String!
  profilePicKey: String!
  profilePicUrl: String!
  address: AddressInput!
}

type User @aws_cognito_user_pools {
  id: String!
  username: String!
  firstName: String!
  lastName: String!
  userType: USERTYPE!
  about: String!
  address: Address
  email: AWSEmail!
  profilePicUrl: String!
  profilePicKey: String!
  subscription: SubscriptionPlan
  createdOn: AWSTimestamp
  updatedOn: AWSTimestamp
}
type Address @aws_cognito_user_pools {
  street: String!
  city: String!
  zip: Int!
  country: String!
}
input AddressInput @aws_cognito_user_pools {
  street: String!
  city: String!
  zip: Int!
  country: String!
}

input CreatePostInput @aws_cognito_user_pools {
  content: String!
  imageUrls: [String!]
  imageKeys: [String!]
  entity: String!
  userId: String!
  schedule: PostScheduleInput
  schedulePost: Boolean!
}

input PostScheduleInput @aws_cognito_user_pools {
  minute: Int!
  second: Int!
  hour: Int!
  day: Int!
  month: Int!
  year: Int!
}
type PostSchedule @aws_cognito_user_pools {
  minute: Int!
  second: Int!
  hour: Int!
  day: Int!
  month: Int!
  year: Int!
}

input UpdatePostInput @aws_cognito_user_pools {
  id: String!
  userId: String
  content: String
  imageUrls: [String!]
  imageKeys: [String!]
  schedule: PostScheduleInput!
  schedulePost: Boolean!
}

type Post @aws_cognito_user_pools {
  id: String!
  userId: String!
  content: String!
  entity: String!
  imageUrls: [String!]
  imageKeys: [String!]
  schedule: PostSchedule!
  schedulePost: Boolean!
  createdOn: AWSTimestamp!
  updatedOn: AWSTimestamp
}

type Subscription {
  createdPost: Post @aws_subscribe(mutations: ["createPost"])

  onGeneratedTextResponse: GeneratedTextResponse
    @aws_cognito_user_pools
    @aws_subscribe(mutations: ["generatedText"])

  onGeneratedImagesResponse: GeneratedImageResponse
    @aws_cognito_user_pools
    @aws_subscribe(mutations: ["generateImagesResponse"])

  # Prompt templates subscription
  createdPromptTemplate: PromptTemplate
    @aws_subscribe(mutations: ["createPromptTemplate"])

  # User subscription events
  createdSubscription: SubscriptionPlan
    @aws_cognito_user_pools
    @aws_subscribe(mutations: ["createSubscription"])
  updatedSubscription: SubscriptionPlan
    @aws_api_key
    @aws_subscribe(mutations: ["updateSubscription"])
}
type PostsResult @aws_cognito_user_pools {
  items: [Post!]!
  nextToken: String
}

enum USERTYPE {
  ADMIN
  MEMBER
}

enum SUBSCRIPTION_TIER {
  BASIC
  STANDARD
  PREMIUM
}
enum SUBSCRIPTION_STATUS {
  ACTIVE
  EXPIRED
  CANCELLED
}
input SubscriptionFeaturesInput {
  postsPerMonth: Int!
  mediaStorageGB: Int!
  knowledgeBaseAvailable: Boolean!
  aiGenerationCredits: Int!
  supportLevel: String!
}

type SubscriptionFeatures {
  postsPerMonth: Int!
  mediaStorageGB: Int!
  knowledgeBaseAvailable: Boolean!
  aiGenerationCredits: Int!
  supportLevel: String!
}

type UserSubscriptionPlan {
  id: String!
  userId: String!
  tier: SUBSCRIPTION_TIER!
  features: SubscriptionFeatures!
  startDate: AWSTimestamp!
  endDate: AWSTimestamp!
  autoRenew: Boolean!
  price: Float!
  status: SUBSCRIPTION_STATUS!
  createdOn: AWSTimestamp!
  updatedOn: AWSTimestamp
}

type SubscriptionPlan {
  id: String
  tier: SUBSCRIPTION_TIER!
  features: SubscriptionFeatures!
  price: Float!
  createdOn: AWSTimestamp!
  updatedOn: AWSTimestamp
}

type UserSubscriptionsResult {
  items: [UserSubscriptionPlan!]!
  nextToken: String
}

type SubscriptionsResult {
  items: [SubscriptionPlan!]!
  nextToken: String
}

input CreateSubscriptionInput {
  tier: SUBSCRIPTION_TIER!
  features: SubscriptionFeaturesInput!
  price: Float!
}
input UpdateSubscriptionInput {
  id: ID!
  tier: SUBSCRIPTION_TIER!
  features: SubscriptionFeaturesInput!
  price: Float!
}

input CreateUserSubscriptionInput {
  userId: String!
  tier: SUBSCRIPTION_TIER!
  autoRenew: Boolean!
}

input UpdateUserSubscriptionInput {
  id: String!
  userId: String!
  tier: SUBSCRIPTION_TIER!
  autoRenew: Boolean!
}

# Prompt template types
type PromptTemplate @aws_cognito_user_pools {
  id: String!
  name: String!
  content: String!
  createdOn: AWSTimestamp!
  updatedOn: AWSTimestamp
}

input CreatePromptTemplateInput @aws_cognito_user_pools {
  name: String!
  content: String!
}

input UpdatePromptTemplateInput @aws_cognito_user_pools {
  id: String!
  name: String!
  content: String!
}

type PromptTemplatesResult @aws_cognito_user_pools {
  items: [PromptTemplate!]!
  nextToken: String
}
