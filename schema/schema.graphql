schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Query {
  getPost(id: String!): Post! @aws_api_key
  getAllPosts(limit: Int!, nextToken: String): PostsResult! @aws_api_key
  getUserAccount(id: String!): User! @aws_api_key
  generateImages(input: String!): [String!]! @aws_api_key
  imageGuidedGeneration(input: ImageGuidedGenerationInput!): [String!]!
    @aws_api_key
  replaceImageBackground(input: ReplaceImageBackgroundInput!): [String!]!
    @aws_api_key
}
input ImageGuidedGenerationInput @aws_api_key {
  prompt: String!
  conditionImage: String!
  numOfImages: Int!
}

input ReplaceImageBackgroundInput @aws_api_key {
  prompt: String!
  image: String!
  numOfImages: Int!
  maskPrompt: String!
}

type Mutation {
  startStateMachine(input: startStateMachineInput!): Boolean! @aws_api_key
  createUserAccount(userInput: CreateUserInput!): User! @aws_api_key
  updateUserAccount(userInput: UpdateUserInput!): User! @aws_cognito_user_pools
  createPost(postInput: CreatePostInput!): Post! @aws_api_key
  updatePost(postInput: UpdatePostInput!): Post! @aws_cognito_user_pools
  deletePost(userId: String!, postId: String!): Boolean! @aws_api_key

  generatedText(input: String!): GeneratedTextResponse! @aws_iam @aws_api_key

  generateImagesWithLambda(input: String!): Boolean @aws_api_key
  generateImagesResponse(input: [String!]!): GeneratedImageResponse!
    @aws_iam
    @aws_api_key
}

type GeneratedImageResponse @aws_iam @aws_api_key {
  base64Images: [String]!
}
type GeneratedTextResponse @aws_iam @aws_api_key {
  text: String!
}

type User @aws_api_key {
  id: String!
  username: String!
  firstName: String!
  lastName: String!
  entity: String!
  userType: USERTYPE!
  address: Address
  email: AWSEmail!
  profilePicUrl: String!
  createdOn: AWSTimestamp
  updatedOn: AWSTimestamp
}

input startStateMachineInput @aws_api_key {
  prompts: String!
}

input CreateUserInput @aws_api_key {
  username: String!
  firstName: String!
  lastName: String!
  email: AWSEmail!
  userType: USERTYPE!
  profilePicUrl: String!
}
input UpdateUserInput @aws_cognito_user_pools {
  id: String!
  username: String!
  email: AWSEmail!
  profilePicUrl: String!
  address: AddressInput!
}
type Address @aws_cognito_user_pools {
  street: String!
  city: String!
  zip: Int!
  country: String!
}
input AddressInput @aws_cognito_user_pools {
  street: String!
  city: String!
  zip: Int!
  country: String!
}

input CreatePostInput @aws_cognito_user_pools {
  content: String!
  entity: String!
  userId: String!
  imageUrl: String
}

input UpdatePostInput @aws_cognito_user_pools {
  id: String!
  userId: String
  content: String
  imageUrl: String
}

type Post @aws_api_key {
  id: String!
  userId: String!
  content: String!
  entity: String!
  imageUrl: String
  createdOn: AWSTimestamp!
  updatedOn: AWSTimestamp
}

type Subscription {
  createdPost: Post @aws_subscribe(mutations: ["createPost"])
  onGeneratedTextResponse: GeneratedTextResponse
    @aws_api_key
    @aws_subscribe(mutations: ["generatedText"])

  onGeneratedImagesResponse: GeneratedImageResponse
    @aws_api_key
    @aws_subscribe(mutations: ["generateImagesResponse"])
}
type PostsResult @aws_api_key {
  items: [Post!]!
  nextToken: String
}

enum USERTYPE {
  ADMIN
  MEMBER
}
